.\" -*- nroff -*-
.\"
.\" Copyright (C) 2014 Bradley Worley <geekysuavo@gmail.com>
.\"
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, write to:
.\"
.\"   Free Software Foundation, Inc.
.\"   51 Franklin Street, Fifth Floor
.\"   Boston, MA  02110-1301, USA.
.\"
.ds g \" empty
.ds G \" empty
.de Tp
.ie \\n(.$=0:((0\\$1)*2u>(\\n(.1u-\\n(.iu)) .TP
.el .TP "\\$1"
..
.TH HX 1 "05 Nov 2014" "libhxnd version 20141105"

.SH NAME
hx \- command-line multi-tool for handling NMR data
.SH SYNOPSIS
.B hx
[
.B \-h
]
.LP
.B hx
[\fIOPTIONS\fR]

.SH DESCRIPTION
.PP
Handles format conversion, processing and other manipulations required during
standard handling of Nuclear Magnetic Resonance data. The
.BR hx
tool may be used to load \fIhx\fR-format data, convert Bruker, Varian and
nmrPipe data files into \fIhx\fR-format data, and completely process any
\fIhx\fR-format data.
.PP
Much in the same way that multiple instances of the
.BR nmrPipe
program may be chained together to form a complete processing scheme, multiple
instances of the
.BR hx
command-line tool may be piped together. However, each tool instance supports
multiple processing functions, and is not limited to only performing one
action.

.SH OPTIONS
A short summary of each option supported by the
.BR hx
tool is given below. Detailed information on each processing function and
example uses of
.BR hx
are provided in subsequent sections of this manual page.
.TP
\fB\-h\fR, \fB-\-help\fR
display a short help message.
.TP
\fB\-i\fR, \fB\-\-input\fR \fIFIN\fR
change the input filename from the default (standard input).
.TP
\fB\-o\fR, \fB\-\-output\fR \fIFOUT\fR
change the output filename from the default (standard output).
.TP
\fB\-p\fR, \fB\-\-pretend\fR
apply no processing functions, just print header information.
.TP
\fB\-f\fR, \fB\-\-function\fR \fIFN\fR
.RE
.RS
.RS
\fB\-f\fR, \fB\-\-function\fR \fIFN\fR[\fID\fR]
.RE
.RS
\fB\-f\fR, \fB\-\-function\fR \fIFN\fR:\fIARG1\fR,\fIARG2\fR,...
.RE
.RS
\fB\-f\fR, \fB\-\-function\fR \fIFN\fR[\fID\fR]:\fIARG1\fR,\fIARG2\fR,...
.RS
apply the processing function \fIFN\fR along dimension \fID\fR with
arguments \fIARG1\fR, \fIARG2\fR...
.RE
.TP
\fB\-v\fR, \fB\-\-value\fR \fIVAR\fR[\fID\fR]=\fIVAL\fR
modify the variable \fIVAR\fR along dimension \fID\fR by assigning a new
value \fIVAL\fR.

.SH "FILE FORMATS"
.PP
The
.BR hx
tool is capable of reading Bruker AMX and DMX format "fid" and "ser" files,
Varian Unity and INOVA format "fid" files, and nmrPipe format files for
conversion into the \fIhx\fR file format.
.PP
The
.BR hx
tool currently only supports outputting files in the \fIhx\fR format.
.SS "Bruker format files"
Files generated by acquisition of data using the \fBXwin-NMR\fR or
\fBTOPSPIN\fR software packages may be read as inputs to \fBhx\fR and
converted into the native \fIhx\fR format, provided that a few required
spectral parameters cay be extracted from nearby "acqus" files. Thus, to
load Bruker format "fid" or "ser" files, the directory containing these
files must be specified as the argument to \fB\-\-input\fR.
.SS "Varian format files"
Files generated by acquisition of data using the \fBVnmr(J)\fR program may
be read as inputs to \fBhx\fR and converted into the native \fIhx\fR format,
provided that the required spectral parameters cay be extracted from the
accompanying "procpar" file. To load Varian format "fid" files, the directory
containing these files must be specified as the argument to \fB\-\-input\fR.
.SS "nmrPipe format files"
Files written by any of the \fBbruk2pipe\fR, \fBvar2pipe\fR, \fBbin2pipe\fR,
\fBxyz2pipe\fR or \fBnmrPipe\fR programs may be read as inputs to \fBhx\fR
and converted into the native \fIhx\fR format. As all spectral parameters
required to interpret the data are included in the header of nmrPipe format
files, no external files are required for conversion.

.SH "PROCESSING FUNCTIONS"
.PP
The \fB\-\-function\fR option in \fBhx\fR is used to apply a multitude of
different processing functions to time-domain and/or frequency-domain NMR
data in the \fIhx\fR format. It requires an argument that obeys one of the
following syntax rules:
.in +4n
.nf

\fIfunction\fR
\fIfunction\fR[\fID\fR]
\fIfunction\fR:\fIargument1\fR,\fIargument2\fR,...
\fIfunction\fR[\fID\fR]:\fIargument1\fR,\fIargument2\fR,...

.fi
.in
Functions that operate on a single dimension at a time will require the
specification of \fID\fR via either the second or fourth rule above.
Otherwise, the first or third rules may be followed.
.PP
Function arguments are specified as a comma-separated list after the
function name, as is shown in the third and fouth rules. Each argument
should be given in the form of \fIargument\fR=\fIvalue\fR, except in
the case of booleans.
.PP
Boolean argument values may be specified in one of two ways. First, they
may be given using an explicit \fBtrue\fR or \fBfalse\fR value via equality
(i.e. \fIarg\fR=\fBtrue\fR). Second, they may be given implicitly by adding
the argument name without an equals sign or value (i.e. \fIarg\fR). In the
second form, prepending \fIno\fR to the argument name (i.e. \fInoarg\fR)
is identical to setting the argument to \fBfalse\fR explicitly via an
equal sign.
.PP
The remainder of this section lists each processing function available in
the \fBhx\fR tool.

.SS abs
FIXME

.SS add
The \fBadd\fR command adds a scalar constant to a the current datum, adds
another \fIhx\fR-format file into the current datum, or both.
.TP
\fBconst\fR (float) [0.0]
real scalar constant to add; can be added into any dimension by specifying
\fID\fR.
.TP
\fBfile\fR (string) ['']
filename of an \fIhx\fR-format file to add into the current datum.
.TP
\fBscale\fR (float) [1.0]
scale factor applied to the contents of \fBfile\fR before addition.
.TP
\fBsubtract\fR (boolean) [false]
negates the value of \fBscale\fR prior to addition when set.

.SS fft
FIXME

.SS ht
FIXME

.SS ist
FIXME

.SS phase
FIXME

.SS resize
The \fBresize\fR command resizes the current datum by truncation and/or
zero-filling.
.TP
\fBsize\fR (integer) [0]
new dimension size, when a dimension \fID\fR is specified.
.TP
\fBshape\fR (int-array) [empty]
new dimension size array, when no dimension is specified.

.SS scale
The \fBscale\fR command multiplies the current datum by a scalar constant.
.TP
\fBfirst\fR (float) [1.0]
real scalar constant to scale the first point by.
.TP
\fBfactor\fR (float) [1.0]
real scalar constant to scale the data by; can be added into any dimension
by specifying \fID\fR.
.TP
\fBinvert\fR (boolean) [false]
inverts the value of \fBfactor\fR prior to multiplication when set.

.SS shift
FIXME

.SS window
FIXME

.SS zerofill
The \fBzerofill\fR command resizes the current datum to a power-of-two size
by zero-filling. The dimension \fID\fR (or each dimension) is up-converted
first to a power-of-two size, then the zero-fill is performed.
.TP
\fBtimes\fR (integer) [0]
number of times to double the up-converted dimension size.

.SH "MODIFYING VALUES"
.PP
Occasionally, incorrect parameter values may be read in from the files that
accompany Bruker or Varian data files. Correction of these values may be
accomplished via the \fB\-\-value\fR option in \fBhx\fR.
.PP
The \fB\-\-value\fR option requires an argument that obeys the following
syntax:
.in +4n
.nf

\fIvariable\fR[\fID\fR]=\fIvalue\fR

.fi
.in
Where \fID\fR is the (one-based) dimension index to apply the modification
to, \fIvalue\fR is the new value, and \fIvariable\fR is one of the following:
.TP
\fBsz\fR (integer)
number of (valid) complex points.
.TP
\fBtd\fR (integer)
total number of sampled time-domain points.
.TP
\fBtdunis\fR (integer)
total number of uniform time-domain points, for cases when \fBnus\fR (below)
is \fItrue\fR.
.TP
\fBcarrier\fR (float, MHz)
center carrier frequency, before any offsets.
.TP
\fBoffset\fR (float, Hz)
carrier offset frequency for transmit.
.TP
\fBwidth\fR (float, Hz)
spectral width around offset carrier.
.TP
\fBcomplex\fR (boolean)
whether the dimension contains real (\fIfalse\fR) or complex (\fItrue\fR)
points.
.TP
\fBnus\fR (boolean)
whether the dimension is uniformly sampled (\fIfalse\fR) or non-uniformly
sampled (\fItrue\fR).
.TP
\fBft\fR (boolean)
whether the dimension is time-domain (\fIfalse\fR) or frequency-domain
(\fItrue\fR).

.SH EXAMPLES
.PP
To convert a Bruker format file into \fIhx\fR format and print a
summary of the converted data:
.in +4n
.nf

hx -i /path/to/experiment/1 -o hnco.hx
hx -i hnco.hx -p
.fi
.in

.PP
To convert a Varian format file into \fIhx\fR format and print a
summary of the converted data:
.in +4n
.nf

hx -i /path/to/experiment.fid -o hnco.hx
hx -i hnco.hx -p
.fi
.in

.PP
To convert a 2D (or greater) Bruker format file with an incorrect acqu2s file
into \fIhx\fR format, simultaneously modifying incorrect values:
.in +4n
.nf

hx -i /path/to/experiment/1 \\
   -v carrier[2]=176.0847   \\
   -v offset[2]=16726.4547  \\
   -v width[2]=39062.5000   \\
   -v name[2]=13C           \\
   -o hsqc.hx
.fi
.in

.PP
To compute the means of two sets of three \fIhx\fR format spectra, and then
subtract the means from each other (A minus B):
.in +4n
.nf

# compute first group mean.
hx -i a1.hx                  \\
   -f add:file=a2.hx         \\
   -f add:file=a3.hx         \\
   -f scale:factor=3,inverse \\
   -o a.hx

# compute second group mean.
hx -i b1.hx                  \\
   -f add:file=b2.hx         \\
   -f add:file=b3.hx         \\
   -f scale:factor=3,inverse \\
   -o b.hx

# compute difference.
hx -i a.hx -o diff.hx        \\
   -f add:file=b.hx,subtract
.fi
.in

.SH AUTHOR
Bradley Worley <geekysuavo@gmail.com>

.SH COPYRIGHT
Copyright \(co 2014 Bradley Worley.
.br
This is free software. You may redistribute copies of it under the terms of
version 2.0 of the GNU General Public License
<http://www.gnu.org/licenses/old-licenses/gpl-2.0.html>.
There is NO WARRANTY, to the extent permitted by law.

.SH "SEE ALSO"
.BR hxgui(1)
