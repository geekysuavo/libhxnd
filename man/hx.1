.\" -*- nroff -*-
.\"
.\" Copyright (C) 2014 Bradley Worley <geekysuavo@gmail.com>
.\"
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, write to:
.\"
.\"   Free Software Foundation, Inc.
.\"   51 Franklin Street, Fifth Floor
.\"   Boston, MA  02110-1301, USA.
.\"
.ds g \" empty
.ds G \" empty
.de Tp
.ie \\n(.$=0:((0\\$1)*2u>(\\n(.1u-\\n(.iu)) .TP
.el .TP "\\$1"
..
.TH HX 1 "15 Feb 2015" "libhxnd version 20150215"

.SH NAME
hx \- command-line multi-tool for handling NMR data
.SH SYNOPSIS
.B hx
[
.B \-h
]
.LP
.B hx
[\fIOPTIONS\fR]

.SH DESCRIPTION
.PP
Handles format conversion, processing and other manipulations required during
standard handling of Nuclear Magnetic Resonance data. The
.BR hx
tool may be used to load \fIhx\fR-format data, convert Bruker, Varian and
nmrPipe data files into \fIhx\fR-format data, and completely process any
\fIhx\fR-format data.
.PP
Much in the same way that multiple instances of the
.BR nmrPipe
program may be chained together to form a complete processing scheme, multiple
instances of the
.BR hx
command-line tool may be piped together. However, each tool instance supports
multiple processing functions, and is not limited to only performing one
action.

.SH OPTIONS
A short summary of each option supported by the
.BR hx
tool is given below. Detailed information on each processing function and
example uses of
.BR hx
are provided in subsequent sections of this manual page.
.TP
\fB\-h\fR, \fB-\-help\fR
display a short help message.
.TP
\fB\-n\fR, \fB\-\-new\fR \fIDIMS\fR
create a new empty datum without reading any input.
.TP
\fB\-i\fR, \fB\-\-input\fR \fIFIN\fR
change the input filename from the default (standard input).
.TP
\fB\-o\fR, \fB\-\-output\fR \fIFOUT\fR
change the output filename from the default (standard output).
.TP
\fB\-F\fR, \fB\-\-format\fR \fIFMT\fR
change the output file format from the default (\fIhx\fR-format).
.TP
\fB\-p\fR, \fB\-\-pretend\fR
apply no processing functions, just print header information.
.TP
\fB\-f\fR, \fB\-\-function\fR \fIFN\fR
.RE
.RS
.RS
\fB\-f\fR, \fB\-\-function\fR \fIFN\fR[\fID\fR]
.RE
.RS
\fB\-f\fR, \fB\-\-function\fR \fIFN\fR:\fIARG1\fR,\fIARG2\fR,...
.RE
.RS
\fB\-f\fR, \fB\-\-function\fR \fIFN\fR[\fID\fR]:\fIARG1\fR,\fIARG2\fR,...
.RS
apply the processing function \fIFN\fR along dimension \fID\fR with
arguments \fIARG1\fR, \fIARG2\fR...
.RE
.TP
\fB\-v\fR, \fB\-\-value\fR \fIVAR\fR[\fID\fR]=\fIVAL\fR
modify the variable \fIVAR\fR along dimension \fID\fR by assigning a new
value \fIVAL\fR.

.SH "FILE FORMATS"
.PP
The
.BR hx
tool is capable of reading Bruker AMX and DMX format "fid" and "ser" files
(\fIbruker\fR), Varian Unity and INOVA format "fid" files (\fIvarian\fR),
nmrPipe format files (\fIpipe\fR), UCSF "Sparky" format files (\fIucsf\fR)
NMRView format files (\fInv\fR) and Rowland NMR Toolkit format files
(\fIrnmrtk\fR) for conversion into the \fIhx\fR file
format.
.PP
The
.BR hx
tool currently supports outputting files in the \fIhx\fR, \fIpipe\fR,
\fIucsf\fR, \fInv\fR, and \fItext\fR formats.
.SS "Bruker format files"
Files generated by acquisition of data using the \fBXwin-NMR\fR or
\fBTOPSPIN\fR software packages may be read as inputs to \fBhx\fR and
converted into the native \fIhx\fR format, provided that a few required
spectral parameters cay be extracted from nearby "acqus" files. Thus, to
load Bruker format "fid" or "ser" files, the directory containing these
files must be specified as the argument to \fB\-\-input\fR.
.SS "Varian format files"
Files generated by acquisition of data using the \fBVnmr(J)\fR program may
be read as inputs to \fBhx\fR and converted into the native \fIhx\fR format,
provided that the required spectral parameters cay be extracted from the
accompanying "procpar" file. To load Varian format "fid" files, the directory
containing these files must be specified as the argument to \fB\-\-input\fR.
.SS "nmrPipe format files"
Files written by any of the \fBbruk2pipe\fR, \fBvar2pipe\fR, \fBbin2pipe\fR,
\fBxyz2pipe\fR or \fBnmrPipe\fR programs may be read as inputs to \fBhx\fR
and converted into the native \fIhx\fR format. As all spectral parameters
required to interpret the data are included in the header of nmrPipe format
files, no external files are required for conversion.
.SS "UCSF format files"
Files stored in the UCSF "Sparky" format may be read as inputs to \fBhx\fR
and converted into the native \fIhx\fR format. All required spectral
parameters are contained in the header of UCSF files, so no external
parameter files are required for conversion.
.SS "NMRView format files"
Files stored in the NMRView(J) blocked format may be read as inputs to
\fBhx\fR and converted into the native \fIhx\fR format. All required spectral
parameters are contained in the header of NMRView files, so no external
parameter files are required for conversion.
.SS "Rowland NMR Toolkit format files"
Tiles stored in the RNMRTK format may be read as inputs to \fBhx\fR and
converted into the native \fIhx\fR format. A parameter file must coexist
with the data file, where the last four characters of the parameter file
are ".par" instead of whatever they are in the data file.

.SH "PROCESSING FUNCTIONS"
.PP
The \fB\-\-function\fR option in \fBhx\fR is used to apply a multitude of
different processing functions to time-domain and/or frequency-domain NMR
data in the \fIhx\fR format. It requires an argument that obeys one of the
following syntax rules:
.in +4n
.nf

\fIfunction\fR
\fIfunction\fR[\fID\fR]
\fIfunction\fR:\fIargument1\fR,\fIargument2\fR,...
\fIfunction\fR[\fID\fR]:\fIargument1\fR,\fIargument2\fR,...

.fi
.in
Functions that operate on a single dimension at a time will require the
specification of \fID\fR via either the second or fourth rule above.
Otherwise, the first or third rules may be followed.
.PP
Function arguments are specified as a comma-separated list after the
function name, as is shown in the third and fouth rules. Each argument
should be given in the form of \fIargument\fR=\fIvalue\fR, except in
the case of booleans.
.PP
Boolean argument values may be specified in one of two ways. First, they
may be given using an explicit \fBtrue\fR or \fBfalse\fR value via equality
(i.e. \fIarg\fR=\fBtrue\fR). Second, they may be given implicitly by adding
the argument name without an equals sign or value (i.e. \fIarg\fR). In the
second form, prepending \fIno\fR to the argument name (i.e. \fInoarg\fR)
is identical to setting the argument to \fBfalse\fR explicitly via an
equal sign.
.PP
The remainder of this section lists each processing function available in
the \fBhx\fR tool.

.SS abs
The \fBabs\fR command computes the magnitude (hypercomplex norm) of the
current datum. No dimension index or arguments may be specified.

.SS add
The \fBadd\fR command adds a scalar constant to a the current datum, adds
another \fIhx\fR-format file into the current datum, or both.
.TP
\fBconst\fR (float) [0.0]
real scalar constant to add; can be added into any dimension by specifying
\fID\fR.
.TP
\fBfile\fR (string) ['']
filename of an \fIhx\fR-format file to add into the current datum.
.TP
\fBscale\fR (float) [1.0]
scale factor applied to the contents of \fBfile\fR before addition.
.TP
\fBsubtract\fR (boolean) [false]
negates the value of \fBscale\fR prior to addition when set.

.SS baseline
The \fBbaseline\fR command removes frequency-domain baseline offset and curve
from all first-dimension traces of the current datum.
.TP
\fBsmooth\fR (float) [1.0]
relative smoothness of the baseline being fit to the data; larger values
produce smoother baseline fits at the expense of fidelity to the data.

.SS complex
The \fBcomplex\fR command promotes one or all dimensions of the current datum
to complex status by adding imaginary algebraic components.

.SS crop
The \fBcrop\fR command removes any frequency content outside a given range
of one dimension of the current datum.
.TP
\fBfrom\fR (float) [0.0]
lower bound of the frequency region to retain after cropping.
.TP
\fBto\fR (float) [1.0]
upper bound of the frequency region to retain after cropping.
.TP
\fBppm\fR (boolean) [false]
interprets the cropping bounds as values in parts per million when set.
.TP
\fBhz\fR (boolean) [false]
interprets the cropping bounds as values in Hertz when set.

.SS cut
The \fBcut\fR command cuts a single trace or plane from the current datum,
removing all other content.
.TP
\fBtrace\fR (int-array) [empty]
array of (one-based) indices specifying the trace location. the trace
dimension should be indicated by a zero-value or \fIx\fR.
.TP
\fBplane\fR (int-array) [empty]
array of (one-based) indices specifying the plane location. the two plane
dimensions should be indicated by zero-values or \fIx\fR.

.SS ffm
The \fBffm\fR command reconstructs all nonuniformly subsampled dimensions in
the current datum using the Fast Forward Maximum Entropy (\fIFFM\fR)
reconstruction algorithm.
.TP
\fBfunc\fR (string) ['hoch']
name of the entropy functional to utilize during gradient calculations.
.TP
\fBiters\fR (integer) [100]
maximum number of iterations to perform.

.SS fft
The \fBfft\fR command applies a radix-2 fast Fourier transform to the
current datum along a given dimension \fID\fR.
.TP
\fBalternate\fR (boolean) [false]
negates every other point in the datum prior to transformation, when set.
.TP
\fBnegate\fR (boolean) [false]
negates the imaginary basis element of dimension \fID\fR prior to
transformation, when set.
.TP
\fBinverse\fR (boolean) [false]
applies an inverse Fourier transform when set.

.SS filter
The \fBfilter\fR command filters a given dimension \fID\fR using a finite
impulse response (FIR) filter. The FIR filter coefficients are derived from
a Blackman-windowed sin(x)/x impulse response.
.TP
\fBorder\fR (integer) [32]
the filter order, or one less than the number of filter coefficients.
.TP
\fBlo\fR (float) [1.0]
the filter low-pass transition frequency. the valid range of \fBlo\fR depends
on whether \fBppm\fR or \fBhz\fR is set. by default, \fBlo\fR is unitless and
ranges from zero to one over the spectral width.
.TP
\fBhi\fR (float) [0.0]
the filter high-pass transition frequency. the valid range of \fBhi\fR also
depends on whether \fBppm\fR or \fBhz\fR is set, like \fBlo\fR.
.TP
\fBppm\fR (boolean) [false]
interprets the transition frequencies as values in parts per million when set.
.TP
\fBhz\fR (boolean) [false]
interprets the transition frequencies as values in Hertz when set.

.SS ht
The \fBht\fR command applies a discrete Hilbert transform to the current
datum in order to reconstruct the imaginary component along a given dimension
\fID\fR. If the datum contains imaginary values, they will be replaced.

.SS irls
The \fBirls\fR command reconstructs all nonuniformly subsampled dimensions
in the current datum using Iteratively Reweighted Least Squares regression
(\fIIRLS\fR).
.TP
\fBnorm\fR (float) [1.0]
value of \fIp\fR in the \fILp\fR norm that iteration should terminate upon.
iteration begins with an \fIL1\fR norm and ends at an \fIL1\fR norm by
default.
.TP
\fBiters\fR (integer) [10]
number of iterations to perform.

.SS ist
The \fBist\fR command reconstructs all nonuniformly subsampled dimensions in
the current datum using Iterative Soft Thresholding (\fIIST\fR).
.TP
\fBthresh\fR (float) [0.9]
relative magnitude to use for soft frequency-domain thresholding at each
iteration.
.TP
\fBiters\fR (integer) [200]
number of iterations to perform.

.SS mirror
The \fBmirror\fR command symmetrizes a given dimension \fID\fR of the current
datum by replacing each pair of points off the center-frequency line with
the point having lowest absolute value. If the dimension is complex, then
replacement is performed to respect phase-sensitivity by retaining the sign
of each point.

.SS multiply
The \fBmultiply\fR command multiplies the current datum by a scalar constant.
.TP
\fBfirst\fR (float) [1.0]
real scalar constant to scale each first point by. specifying \fID\fR sets
which array dimension the first-point scaling is applied to. an unspecified
value indicates the first array dimension.
.TP
\fBfactor\fR (float) [1.0]
real scalar constant to scale the data by; always applied as a real value,
regardless of the value of \fID\fR.
.TP
\fBinvert\fR (boolean) [false]
inverts the value of \fBfactor\fR prior to multiplication when set.

.SS phase
The \fBphase\fR command applies a zero-order and first-order phase correction
to the current datum along a given dimension \fID\fR.
.TP
\fBph0\fR (float) [0.0]
zero-order phase correction value, in degrees.
.TP
\fBph1\fR (float) [0.0]
first-order phase correction value, in degrees.
.TP
\fBpivot\fR (float) [0.5]
pivot location for first-order phase corrections. the pivot range depends on
whether \fBppm\fR or \fBhz\fR are set. by default, the pivot is unitless and
ranges from zero to one over the spectral width.
.TP
\fBppm\fR (boolean) [false]
interprets the pivot location as a value in parts per million when set.
.TP
\fBhz\fR (boolean) [false]
interprets the pivot location as a value in Hertz when set.
.TP
\fBinverse\fR (boolean) [false]
negates the specified phase correction values when set.

.SS project
The \fBproject\fR command projects down a given dimension \fID\fR in the
current datum by applying the specified vector-to-scalar projection
operation (\fBtype\fR) to each vector along that dimension.
.TP
\fBtype\fR (string) ['sum']
type of vector-to-scalar projection operation to apply. must be one of
\fIsum\fR, \fImin\fR or \fImax\fR.

.SS real
The \fBreal\fR command compresses one or all dimensions of the current datum
by dropping imaginary algebraic components.

.SS report
The \fBreport\fR command prints a variety of interesting reports and statistics
relating to the current datum.
.TP
\fBsumsq\fR (boolean) [false]
prints the sum of squared datum array elements when set.

.SS resize
The \fBresize\fR command resizes the current datum by truncation and/or
zero-filling.
.TP
\fBsize\fR (integer) [0]
new dimension size, when a dimension \fID\fR is specified.
.TP
\fBshape\fR (int-array) [empty]
new dimension size array, when no dimension is specified. must contain a size
value for each datum dimension.

.SS shift
The \fBshift\fR command shifts the current datum along dimension \fID\fR by
a specified amount.
.TP
\fBamount\fR (float) [0.0]
the shift amount, in points (default) or the units specified.
.TP
\fBpoints\fR (boolean) [true]
interprets the shift amount as a number of points when set.
.TP
\fBsec\fR (boolean) [false]
interprets the shift amount as a time in seconds when set.
.TP
\fBppm\fR (boolean) [false]
interprets the shift amount as a frequency in ppm when set.
.TP
\fBhz\fR (boolean) [false]
interprets the shift amount as a frequency in Hertz when set.
.TP
\fBround\fR (boolean) [false]
when set, forces the rounding of the shift amount, allowing the shifting of
non power-of-two dimensions.

.SS subsample
The \fBsubsample\fR command transforms a uniformly sampled datum into a
nonuniformly sampled datum by inserting a nonuniform sampling schedule
into the datum and zeroing out all non-scheduled data points.
.TP
\fBsched\fR (string) ['']
filename of an \fIhx\fR-compatible nonuniform sampling schedule to load.

.SS symmetrize
The \fBsymmetrize\fR command symmetrizes a given pair of dimensions of the
current datum by replacing each pair of points off their diagonal with
the point having lowest absolute value. If the dimension is complex, then
replacement is performed to respect phase-sensitivity by retaining the sign
of each point.
.TP
\fBdims\fR (int-array) [(1; 2)]
dimension indices of the plane or planes to symmetrize with respect to the
diagonal line.

.SS tilt
The \fBtilt\fR command applies a variable fractional shift to two dimension
of the current datum, effectively achieving a tilting of the points along
one dimension with respect to the other. If a tilt angle is unspecified,
it will be automatically determined based on the spectral widths and point
counts along the dimensions in the \fBdims\fR argument.
.TP
\fBangle\fR (float) [0.0]
tilt angle to apply to the shifted dimension.
.TP
\fBdims\fR (int-array) [(1; 2)]
datum dimension indices to use when automatically computing the tilt angle.
the second dimension index in the array will be shifted.

.SS window
The \fBwindow\fR command multiplies the current datum by a window function
along dimension \fID\fR. When no dimension is specified, \fBwindow\fR defaults
to the first dimension.
.TP
\fBtype\fR (string) ['sine']
window type string. must be one of \fIsine\fR, \fIexp\fR, \fIgauss\fR,
\fItrap\fR, \fItri\fR or \fIblack\fR.
.TP
\fBstart\fR (float) [0.0]
starting point for \fIsine\fR windows. rising edge endpoint for \fItrap\fR
windows. first-point height for \fItri\fR windows.
.TP
\fBend\fR (float) [1.0]
ending point for \fIsine\fR windows. falling edge starting point for
\fItrap\fR windows. last-point height for \fItri\fR windows.
.TP
\fBorder\fR (float) [1.0]
exponent value for \fIsine\fR windows.
.TP
\fBlb\fR (float) [0.0]
forward line-broadening factor for \fIexp\fR and \fIgauss\fR windows.
.TP
\fBinvlb\fR (float) [0.0]
inverse exponential line-broadening factor for \fIgauss\fR windows.
.TP
\fBcenter\fR (float) [0.0]
point of function maximum for \fIgauss\fR and \fItri\fR windows.

.SS zerofill
The \fBzerofill\fR command resizes the current datum to a power-of-two size
by zero-filling. The dimension \fID\fR (or each dimension) is up-converted
first to a power-of-two size, then the zero-fill is performed.
.TP
\fBtimes\fR (integer) [0]
number of times to double the up-converted dimension size.

.SH "MODIFYING VALUES"
.PP
Occasionally, incorrect parameter values may be read in from the files that
accompany Bruker or Varian data files. Correction of these values may be
accomplished via the \fB\-\-value\fR option in \fBhx\fR.
.PP
The \fB\-\-value\fR option requires an argument that obeys the following
syntax:
.in +4n
.nf

\fIvariable\fR[\fID\fR]=\fIvalue\fR

.fi
.in
Where \fID\fR is the (one-based) dimension index to apply the modification
to, \fIvalue\fR is the new value, and \fIvariable\fR is one of the following:
.TP
\fBsz\fR (integer)
number of (valid) complex points.
.TP
\fBtd\fR (integer)
total number of sampled time-domain points.
.TP
\fBtdunif\fR (integer)
total number of uniform time-domain points, for cases when \fBnus\fR (below)
is \fItrue\fR.
.TP
\fBcarrier\fR (float, MHz)
center carrier frequency, before any offsets.
.TP
\fBoffset\fR (float, Hz)
carrier offset frequency for transmit.
.TP
\fBwidth\fR (float, Hz)
spectral width around offset carrier.
.TP
\fBname\fR (string)
human-readable short description of the dimension, usually a nucleus.
.TP
\fBcomplex\fR (boolean)
whether the dimension contains real (\fIfalse\fR) or complex (\fItrue\fR)
points.
.TP
\fBnus\fR (boolean)
whether the dimension is uniformly sampled (\fIfalse\fR) or non-uniformly
sampled (\fItrue\fR).
.TP
\fBft\fR (boolean)
whether the dimension is time-domain (\fIfalse\fR) or frequency-domain
(\fItrue\fR).
.TP
\fBalternate\fR (boolean)
whether the dimension requires sign alternation during array refactoring.
.TP
\fBnegate\fR (boolean)
whether the dimension requires imaginary negation during array refactoring.
.TP
\fBgradient\fR (boolean)
whether the dimension is gradient-enhanced, thus requiring a bit of arithmetic
during array refactoring.

.SH EXAMPLES
.PP
To convert a Bruker format file into \fIhx\fR format and print a
summary of the converted data:
.in +4n
.nf

hx -i /path/to/experiment/1 -o hnco.hx
hx -i hnco.hx -p
.fi
.in

.PP
To convert a Varian format file into \fIhx\fR format and print a
summary of the converted data:
.in +4n
.nf

hx -i /path/to/experiment.fid -o hnco.hx
hx -i hnco.hx -p
.fi
.in

.PP
To convert a 2D (or greater) Bruker format file with an incorrect acqu2s file
into \fIhx\fR format, simultaneously modifying incorrect values:
.in +4n
.nf

hx -i /path/to/experiment/1 \\
   -v carrier[2]=176.0847   \\
   -v offset[2]=16726.4547  \\
   -v width[2]=39062.5000   \\
   -v name[2]=13C           \\
   -o hsqc.hx
.fi
.in

.PP
To compute the means of two sets of three \fIhx\fR format spectra, and then
subtract the means from each other (A minus B):
.in +4n
.nf

# compute first group mean.
hx -i a1.hx                  \\
   -f add:file=a2.hx         \\
   -f add:file=a3.hx         \\
   -f mul:factor=3,inverse \\
   -o a.hx

# compute second group mean.
hx -i b1.hx                  \\
   -f add:file=b2.hx         \\
   -f add:file=b3.hx         \\
   -f mul:factor=3,inverse \\
   -o b.hx

# compute difference.
hx -i a.hx -o diff.hx        \\
   -f add:file=b.hx,subtract
.fi
.in

.SH AUTHOR
Bradley Worley <geekysuavo@gmail.com>

.SH COPYRIGHT
Copyright \(co 2014 Bradley Worley.
.br
This is free software. You may redistribute copies of it under the terms of
version 2.0 of the GNU General Public License
<http://www.gnu.org/licenses/old-licenses/gpl-2.0.html>.
There is NO WARRANTY, to the extent permitted by law.

.SH "SEE ALSO"
.BR ghx(1)
